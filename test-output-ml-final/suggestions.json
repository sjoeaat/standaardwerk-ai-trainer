{
  "pendingSuggestions": [
    {
      "originalLine": "Produktion (Haupt Einfuhr SCHRITT 3)",
      "lineNumber": 602,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.8430555555555554,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Füllen Etage (RUHE & SCHRITT 1)",
      "lineNumber": 936,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.726,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Füllen Reihe (RUHE & SCHRITT 1)",
      "lineNumber": 948,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.726,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Füllen Reihe (RUHE & SCHRITT 1)",
      "lineNumber": 955,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.726,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Entleeren Etage (RUHE & SCHRITT 1)",
      "lineNumber": 2165,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7188679245283018,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Entleeren Etage (RUHE & SCHRITT 1)",
      "lineNumber": 2169,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7188679245283018,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Entleeren Reihe (RUHE & SCHRITT 1)",
      "lineNumber": 2185,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7188679245283018,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Bestimmen erste zu Entleeren Reihe (RUHE & SCHRITT 1)",
      "lineNumber": 2194,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7188679245283018,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Start Entleeren N31 (Entleeren N31 SCHRITT 6)",
      "lineNumber": 2257,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7944444444444444,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "+ Start Entleeren N32 (Entleeren N32 SCHRITT 6)",
      "lineNumber": 2258,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7861702127659574,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "+ Start Entleeren N33 (Entleeren N33 SCHRITT 6)",
      "lineNumber": 2259,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7861702127659574,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "+ Start Entleeren N34 (Entleeren N34 SCHRITT 6)",
      "lineNumber": 2260,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7861702127659574,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Ende Produktion (K5 in Ruhe) (Komm. von K5)",
      "lineNumber": 3588,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6976744186046512,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "Ende Produktion (K5 in Ruhe) (Komm. von K5)",
      "lineNumber": 3596,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6976744186046512,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 0 | Ende Einfuhr (Hauptprogramm Einfuhr SCHRITT 8) |",
      "lineNumber": 3727,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.8062499999999999,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| Vorselektierte Horde für 1e Befüllung + 1 | Start Einfuhr (Hauptprogramm Einfuhr RUHE & SCHRITT 1)[ Aktive Einfuhrhorde = 21Umschwimmen aktiv (N21: Umschwimmen Horde nach N31 NICHT RUHE)+ Aktive Einfuhrhorde = 22Umschwimmen aktiv (N22: Umschwimmen Horde nach N32 NICHT RUHE)+ Aktive Einfuhrhorde = 23Umschwimmen aktiv (N23: Umschwimmen Horde nach N33 NICHT RUHE)+ Aktive Einfuhrhorde = 24Umschwimmen aktiv (N24: Umschwimmen Horde nach N34 NICHT RUHE) ] |",
      "lineNumber": 3736,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6307017543859649,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 0 | SCHRITT 3+6+9+12Produktion (Hauptprogramm Einfuhr SCHRITT 3) |",
      "lineNumber": 3738,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7649999999999999,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 1 | Speichern letzte gefüllte EtageSCHRITT 14&15Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage = 20+ Hauptprogramm Einfuhr: Vorselektierte Horde für 1e Befüllung leer+Start Einfuhr (Hauptprogramm Einfuhr RUHE & SCHRITT 1)[ Aktive Einfuhrhorde = 21Umschwimmen aktiv (N21: Umschwimmen Horde nach N31 NICHT RUHE)+ Aktive Einfuhrhorde = 22Umschwimmen aktiv (N22: Umschwimmen Horde nach N32 NICHT RUHE)+ Aktive Einfuhrhorde = 23Umschwimmen aktiv (N23: Umschwimmen Horde nach N33 NICHT RUHE)+ Aktive Einfuhrhorde = 24Umschwimmen aktiv (N24: Umschwimmen Horde nach N34 NICHT RUHE) ] |",
      "lineNumber": 3741,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6240137221269296,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 0 | Horde aktiv (3+6+9+12)Produktion (Haupt Einfuhr SCHRITT 3) |",
      "lineNumber": 3742,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7286764705882353,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Vorselektierte Horde für 1e Befüllung | 1e Befüllung bei Aufstart:[ Horde N21 vorselektiert (SCHRITT 2)+ Horde N22 vorselektiert (SCHRITT 5)+ Horde N23 vorselektiert (SCHRITT 8)+ Horde N24 vorselektiert (SCHRITT 11) ]Einfuhr NICHT aktiv (Hauptprogramm Einfuhr NICHT SCHRITT 3-5) |",
      "lineNumber": 3744,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6505281690140845,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 21 | Horde N21 vorselektiert (SCHRITT 2)Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5) |",
      "lineNumber": 3745,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7289473684210526,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 22 | Horde N22 vorselektiert (SCHRITT 5)Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5) |",
      "lineNumber": 3746,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7289473684210526,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 23 | Horde N23 vorselektiert (SCHRITT 8)Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5) |",
      "lineNumber": 3747,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7289473684210526,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 24 | Horde N24 vorselektiert (SCHRITT 11)Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5) |",
      "lineNumber": 3748,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7276041666666666,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Vorselektierte Etage  für 1e Befüllung | 1e Befüllung bei Aufstart:[ Horde N21 vorselektiert (SCHRITT 2)+ Horde N22 vorselektiert (SCHRITT 5)+ Horde N23 vorselektiert (SCHRITT 8)+ Horde N24 vorselektiert (SCHRITT 11) ]Einfuhr NICHT aktiv (Hauptprogramm Einfuhr NICHT SCHRITT 3-5) |",
      "lineNumber": 3750,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6503508771929825,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 1 | [ Horde N21 vorselektiert (SCHRITT 2)+ Horde N22 vorselektiert (SCHRITT 5)+ Horde N23 vorselektiert (SCHRITT 8)+ Horde N24 vorselektiert (SCHRITT 11) ]Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5) |",
      "lineNumber": 3751,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6583333333333333,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Selektionsprogramm Horden für Einfuhr Erwünschte Etage für vorselektierte Horde | Bestimmen erste zu Füllen Etage (RUHE & SCHRITT 1)Selektionsprogramm Horden für Einfuhr: Erwünschte Etage für vorselektierte Horde > 0Selektionsprogramm Horden für Einfuhr: Erwünschte Etage für vorselektierte Horde < 21 |",
      "lineNumber": 3768,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6205211726384364,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Pos 1 (Reihen 1 & 4) | Bestimmen erste zu Füllen Reihe (RUHE & SCHRITT 1)Ungerade Etage+Neue Reihe bestimmen (SCHRITT 9&10)Nächste Etage nach diese ReiheUngerade Etage |",
      "lineNumber": 3772,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6364161849710982,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Pos 3 (Reihen 4 & 6) | Bestimmen erste zu Füllen Reihe (RUHE & SCHRITT 1)NICHT Ungerade Etage+Neue Reihe bestimmen (SCHRITT 9&10)Nächste Etage nach diese ReiheNICHT Ungerade Etage |",
      "lineNumber": 3773,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.634054054054054,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | Käse vorbei zahlpunkt Ende T10B (Käsezähler Ende T10B SCHRITT 1&2)Reihe füllen aktiv (T10: Füllen Horde SCHRITT 2-3) |",
      "lineNumber": 3781,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6922480620155038,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| IN | SCHRITT 2Wartet auf nächsten Auftrag (T11: Füllen Horde SCHRITT 4) |",
      "lineNumber": 3784,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7353333333333333,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| R | Käse detektiert (Käsezähler Anfang T10B SCHRITT 1) |",
      "lineNumber": 3785,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.8051724137931033,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| +1 | Käse Am Anfang T10B gezahlt (Käsezähler Anfang T10B SCHRITT 1&2) |",
      "lineNumber": 3792,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7726027397260273,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| +1 | Käse am Ende T10B gezahlt (Käsezähler Ende T10B SCHRITT 1&2) |",
      "lineNumber": 3795,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.772463768115942,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 7Käse am Ende Einfuhrbahn T10A (T10-202)ZEIT 30sek??+SCHRITT 3Einfuhr nicht aktiv (Hauptprogramm Einfuhr NICHT SCHRITT 2-5)Käse am Ende Einfuhrbahn T10A (T10-202) |",
      "lineNumber": 3817,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.678415300546448,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Hauptprogramm Einfuhr: Einfuhr aktiv NICHT Einfuhrbahn T10A unten im Rinne N20 (T10-200)+Freigabe Start Transportbänder T10A,B,C (Reinigung Einfuhrwagen: SCHRITT 2)Einfuhrbahn T10A unten im Rinne TN10 (T10-200)** |",
      "lineNumber": 3820,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6539647577092511,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 4Kein Käse detektiert (T10: Käsezähler Anfang T10B RUHE)Kein Käse am Anfang 1e Teil Einfuhrbahn T10B (Käsezähler) (T10-203)MT10B Bahn drehtZeit ~5Sek |",
      "lineNumber": 3823,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 5Käse detektiert (T10: Käsezähler Anfang T10B SCHRITT 1)NICHT Kein Käse am Anfang Einfuhrwagen T10B (T10-203) MT10B Bahn drehtZeit ~5Sek |",
      "lineNumber": 3826,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6869426751592357,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3-10Kein Käse detektiert (T10: Käsezähler Ende T10B RUHE)T10: Füllen Horde: Variable_1 (Anzahl Käse am T10B anwesend) > 0MT10B Bahn dreht |",
      "lineNumber": 3828,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6708860759493671,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | ??Käse detektiert (T10: Käsezähler Ende T10B SCHRITT 1)T10: Füllen Horde: Variable_1 (Anzahl Käse am T10B anwesend) = 0MT10B Bahn dreht |",
      "lineNumber": 3831,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6875,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | Käse Auf T10B anwesend (T10: Transportbahn Käse anfuhr T10B SCHRITT 5-10)Reihe füllen aktiv (T10: Füllen Horde SCHRITT 2-3) |",
      "lineNumber": 3834,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7286764705882353,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Zeit 1.Q+ Reihe füllen aktiv (T10: Füllen Horde NICHT SCHRITT 2-3) |",
      "lineNumber": 3835,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7560240963855421,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| IN | Käse Auf T10B anwesend (T10: Transportbahn Käse anfuhr T10B SCHRITT 3-6+9-10)MT10B Bahn drehtReihe füllen aktiv (T10: Füllen Horde SCHRITT 2-3) |",
      "lineNumber": 3837,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7243421052631579,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| R | Käse vorbei zahlpunkt Ende T10B (Käsezähler Ende T10B SCHRITT 1&2)+ Reihe füllen nicht aktiv (T10: Füllen Horde NICHT SCHRITT 2-3) |",
      "lineNumber": 3838,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.686231884057971,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung 2N09/N20 bei Einfuhr Ruhe | Einfuhr nicht aktiv (Hauptprogramm Einfuhr RUHE) |",
      "lineNumber": 3853,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6951456310679611,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung 2N09/N20 bei Produktion | Einfuhr aktiv (Hauptprogramm Einfuhr NICHT RUHE) |",
      "lineNumber": 3854,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7178217821782178,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| Ausfuhr fertig (Hauptprogramm Ausfuhr SCHRITT 8) |  |",
      "lineNumber": 3874,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.8099999999999999,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| -1 | Käse gezählt am 1e Teil T40A (Käsezähler T40 SCHRITT 1&2) |",
      "lineNumber": 3894,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7484848484848484,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 0 | Ausfuhr nicht aktiv (Hauptprogramm Ausfuhr RUHE)+Drucktaste Reihe ist leer bedient |",
      "lineNumber": 3896,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7065217391304348,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Horden Ausfuhrtabelle. Reihe[0]. von Etage | Bestimmen erste zu Entleeren Etage (RUHE & SCHRITT 1)Horden Ausfuhrtabelle. Reihe[0]. von Etage > 0Horden Ausfuhrtabelle. Reihe[0]. von Etage < 21 |",
      "lineNumber": 3898,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.631979695431472,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 20 | Bestimmen erste zu Entleeren Etage (RUHE & SCHRITT 1)[ Horden Ausfuhrtabelle. Reihe[0]. von Etage < 1+ Horden Ausfuhrtabelle. Reihe[0]. von Etage > 20 ] |",
      "lineNumber": 3899,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6386503067484662,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Horden Ausfuhrtabelle. Reihe[0]. von Reihe | Bestimmen erste zu Entleeren Reihe (RUHE & SCHRITT 1)Horden Ausfuhrtabelle. Reihe[0]. von Reihe >=1Horden Ausfuhrtabelle. Reihe[0]. von Reihe <=6 |",
      "lineNumber": 3903,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6321428571428571,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 1 | Bestimmen erste zu Entleeren Reihe (RUHE & SCHRITT 1)[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1+ Horden Ausfuhrtabelle. Reihe[0]. von Reihe > 6 ]NICHT Ungerade Etage+Neue Reihe bestimmen (SCHRITT 13&14)Nächste Etage nach diese ReiheNICHT Ungerade Etage |",
      "lineNumber": 3904,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6235074626865671,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 6 | Bestimmen erste zu Entleeren Reihe (RUHE & SCHRITT 1)[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1+ Horden Ausfuhrtabelle. Reihe[0]. von Reihe > 6 ]Ungerade Etage+Neue Reihe bestimmen (SCHRITT 13&14)Nächste Etage nach diese ReiheUngerade Etage |",
      "lineNumber": 3905,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.624609375,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Start Entleeren N31 (Entleeren N31 SCHRITT 6)+ Start Entleeren N32 (Entleeren N32 SCHRITT 6)+ Start Entleeren N33 (Entleeren N33 SCHRITT 6)+ Start Entleeren N34 (Entleeren N34 SCHRITT 6) |",
      "lineNumber": 3920,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6431034482758621,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Käse wird ausgeführt aus Horde (T40: Entleeren Horde Reihe für Reihe SCHRITT 8+9)Anzahl Käse in Reihe <> 0Strömungspumpe P06 Strömung in aktive Ausfuhrhorde OKMT40A drehtAusfuhr gestartet (Hauptprogramm Ausfuhr NICHT RUHE)Käse am Anfang 2e Teil Ausfuhrbahn T40A des Ausfuhrwagen T40 (Käsezähler) (T40-200)Zeit (??s)** |",
      "lineNumber": 3943,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6527108433734939,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **{ [ Kein Käse aus Horde (T40: Entleeren Horde Reihe für Reihe NICHT SCHRITT 8+9)NICHT T40 Entleeren Horde Reihe für Reihe: Stau hinten AusfuhrwagenNICHT T40 Entleeren Horde Reihe für Reihe:  Beschäftigt mit Abfuhr letzte Käse  vorige Reihe+ Käsezähler T40A SCHRITT 1 ]MT40A drehtZeit(±??s)+ Start Ausfuhr (Hauptprogramm Ausfuhr RUHE&SCHRITT 1) }Ausfuhr gestartet (Hauptprogramm Ausfuhr NICHT RUHE)NICHT Käse am Anfang 2e Teil Ausfuhrbahn T40A des Ausfuhrwagen T40 (Käsezähler) (T40-200)** |",
      "lineNumber": 3946,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6389662027833002,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Hauptprogramm Ausfuhr: Ausfuhr aktiv NICHT Ausfuhrbahn 1e Teil T40A unten im Rinne N40 (T40-205)+Freigabe Start Transportbänder T40A,B (Reinigung Ausfuhrwagen T40: SCHRITT 2)NICHT Ausfuhrbahn 1e Teil T40A oben (T40-204)** |",
      "lineNumber": 3949,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6578389830508474,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| +1 | Käse gezählt am 2e Teil T40A (Käsezähler T40 SCHRITT 1&2) |",
      "lineNumber": 3952,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7484848484848484,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Zähler 1 (Anzahl Käse vorbei Käsezähler für Störungsdetektion T40-201) > xx (5)MT40B drehtAusfuhr gestartet (Hauptprogramm Ausfuhr NICHT RUHE)Zeit (??s)** |",
      "lineNumber": 3955,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.670414201183432,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **[ Hauptprogramm Ausfuhr: NICHT Staumeldung Ausfuhrrinne N40Käse in Rinne N40 hinten Ausfuhrbahn T40B (T40-201)Zeit ??+ Start Ausfuhr (Hauptprogramm Ausfuhr RUHE&SCHRITT 1)Käse in Rinne N40 hinten Ausfuhrbahn T40B (T40-201)+Entleeren Ausfuhrrinne N40 (Hauptprogramm Ausfuhr SCHRITT 5)Strömung Ausfuhrrinne N40: Strömung Ausfuhrrinne N40 OK Zeit (?? Minuten) ]Ausfuhr gestartet (Hauptprogramm Ausfuhr NICHT RUHE)** |",
      "lineNumber": 3958,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6270491803278688,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| +1 | Käse gezählt am 2e Teil T40A (Käsezähler T40 SCHRITT 1&2) |",
      "lineNumber": 3961,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7484848484848484,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Zähler 2 (Anzahl Käse vorbei Käsezähler für Störungsdetektion N40-200)>xx (25)Strömung Ausfuhrrinne N40: Strömung Ausfuhrrinne N40 OKAusfuhr gestartet (Hauptprogramm Ausfuhr NICHT RUHE)Zeit (??s)** |",
      "lineNumber": 3964,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.656132075471698,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | Entleeren Ausfuhrrinne N40 (Hauptprogramm Ausfuhr SCHRITT 5)Strömung Ausfuhrrinne N40: Strömung Ausfuhrrinne N40 OK Zeit (?? Minuten)+ Start Ausfuhr (Hauptprogramm Ausfuhr RUHE&SCHRITT 1)Staumeldung Ausfuhrrinne N40 (N40-200) |",
      "lineNumber": 3967,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6485294117647059,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | **Hauptprogramm Ausfuhr: Ausfuhr aktiv NICHT Ausfuhrbahn 2e Teil T40B unten im Rinne N40 (T40-206)+Freigabe Start Transportbänder T40A,B (Reinigung Ausfuhrwagen T40: SCHRITT 2)NICHT Ausfuhrbahn 2e Teil T40B oben (T40-207)** |",
      "lineNumber": 3970,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6578389830508474,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = T10: Füllen Horde Reihe für Reihe: Erwünschte Etage | Horde wird gefüllt (Füllen Horde N21 SCHRITT 7+8)Positionieren Horde (2T10: Füllen Horde Reihe für Reihe SCHRITT 1& 2) |",
      "lineNumber": 3999,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6589887640449438,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| N21: Umschwimmen Horde nach N31: Erwünschte Etage | Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde SCHRITT 6) |",
      "lineNumber": 4000,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7008474576271186,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 21 (Unterste Position) | Start Horde nach unterste Position (Füllen Horde N21 SCHRITT 11)+Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 21) |",
      "lineNumber": 4001,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6604166666666667,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | ….??....(Umschwimmen Horde N21 nach N31 SCHRITT 16)NICHT Pumpe P04 drehtZeit+NICHT Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe[NICHT Zeit (Ausschaltverzögerung 3 Sek) Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+ Andere Horde beschäftigt mit umschwimmen:+ Strömungsjet für Horde N22 öffnen (N22-300)+ Strömungsjet für Horde N23 öffnen (N23-300)+ Strömungsjet für Horde N24 öffnen (N24-300)]NICHT Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmtAktive Horde N21 (Füllen Horde N21 Füllen Horde gestartet)+Umschwimmen Horde N21 nach N31 RUHE+1+2Füllen Horde N21 NICHT Füllen Horde gestartet |",
      "lineNumber": 4015,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6237007874015748,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | Zählen Käse in Reihe (T10: Füllen Horde Reihe für Reihe SCHRITT 7)T10: Füllen Horde Reihe für Reihe: Zähler 1 (Füllzähler in Reihe von Horde) >= 11+Zeit kein Käsezufuhr (Zeit 4 aus T10:Transportbahn T10C)T10: Füllen Horde Reihe für Reihe: Käse in aktive Etage+T10: Füllen Horde Reihe für Reihe: SCHRITT 8+9 |",
      "lineNumber": 4026,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.649373040752351,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Zählen Käse in Reihe (T10: Füllen Horde Reihe für Reihe SCHRITT 7)T10: Füllen Horde Reihe für Reihe: Zähler 1 (Füllzähler in Reihe von Horde) = 0NICHT Zeit kein Käsezufuhr (Zeit 4 aus T10:Transportbahn T10C)+T10: Füllen Horde Reihe für Reihe: RUHE |",
      "lineNumber": 4027,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6596590909090909,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| SETZEN | Zählen Käse in Reihe (T10: Füllen Horde Reihe für Reihe SCHRITT 7)Horde beschäftigt mit umschwimmen:[Strömungsjet für Horde N21 öffnen (N21-300)+ Strömungsjet für Horde N22 öffnen (N22-300)+ Strömungsjet für Horde N23 öffnen (N23-300)+ Strömungsjet für Horde N24 öffnen (N24-300)]T10: Füllen Horde Reihe für Reihe: Zähler 1 (Füllzähler in Reihe von Horde) < ??Zeit (15 Sek) |",
      "lineNumber": 4029,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6408031088082902,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 15 Hz | Umschwimmen nicht aktiv:nicht Umschwimmen aktiv (Umschwimmen Horde N21 nach N31 NICHT SCHRITT 3-15)nicht Umschwimmen aktiv (Umschwimmen Horde N22 nach N32 NICHT SCHRITT 3-15)nicht Umschwimmen aktiv (Umschwimmen Horde N23 nach N33 NICHT SCHRITT 3-15)nicht Umschwimmen aktiv (Umschwimmen Horde N24 nach N34 NICHT SCHRITT 3-15) |",
      "lineNumber": 4032,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.652810650887574,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 30 Hz | Umschwimmen aktiv (Umschwimmen Horde N21 nach N31 SCHRITT 3-15)+Umschwimmen aktiv (Umschwimmen Horde N22 nach N32 SCHRITT 3-15)+Umschwimmen aktiv (Umschwimmen Horde N23 nach N33 SCHRITT 3-15)+Umschwimmen aktiv (Umschwimmen Horde N24 nach N34 SCHRITT 3-15) |",
      "lineNumber": 4033,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6585501858736059,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Horden Ausfuhrtabelle. Reihe[1].Von Etage | Start Horde aufstellen für Entleeren (Entleeren Horde N31 SCHRITT 2&3) |",
      "lineNumber": 4038,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.69625,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 2T30: Entleeren Horde Reihe für Reihe: Erwünschte Etage | Horde wird entleert (Entleeren Horde N31 SCHRITT 7+8)Positionieren Horde (2T30: Entleeren Horde Reihe für Reihe SCHRITT 1&2) |",
      "lineNumber": 4039,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6614361702127659,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| N21: Umschwimmen Horde nach N31: Erwünschte Etage | Bestimmen Etage Umschwimmen (N21: Umschwimmen Horde nach N31 SCHRITT 2&3) |",
      "lineNumber": 4040,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7220930232558139,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = 21 (Unterste Position) | Start Horde nach unterste Position (Entleeren Horde N31 SCHRITT 12)+Horde nach unterste Position (Umschwimmen Horde N21 nach N31 SCHRITT 18) |",
      "lineNumber": 4041,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.6654970760233918,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung MP01 bei kein Einfuhr(zB 20 Hz) | Einfuhr nicht aktiv (Hauptprogramm Einfuhr RUHE) |",
      "lineNumber": 4051,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.689908256880734,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung MP01 bei Einfuhr(zB 25 Hz) | Einfuhr aktiv (Hauptprogramm Einfuhr NICHT RUHE) |",
      "lineNumber": 4052,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7144230769230769,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung MP02 bei kein Einfuhr(zB 20 Hz) | Einfuhr nicht aktiv (Hauptprogramm Einfuhr RUHE) |",
      "lineNumber": 4054,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.689908256880734,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| = Einstellung Strömung MP02 bei Einfuhr(zB 25 Hz) | Einfuhr aktiv (Hauptprogramm Einfuhr NICHT RUHE) |",
      "lineNumber": 4055,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7144230769230769,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "| +1 | SCHRITT 4Käse detektiert auf mitten 2T09 (Käsezähler T09 SCHRITT 1&2) |",
      "lineNumber": 4063,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "crossReferences",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "suggestedGroup": "crossReferences",
      "confidence": 0.7256410256410256,
      "reasoning": [
        "Intelligently categorized as crossReferences"
      ]
    },
    {
      "originalLine": "+ Vorselektierte Horde für 1e Befüllung < 21",
      "lineNumber": 571,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 939,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 961,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horde[aktive Einfuhrhorde].Etage_Daten[Erwünschte Etage].Reihe_Daten[4].Anzahl Käse > 0",
      "lineNumber": 977,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horde[aktive Einfuhrhorde].Etage_Daten[Erwünschte Etage].Reihe_Daten[6].Anzahl Käse > 0",
      "lineNumber": 979,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste nächste Reihe bedient",
      "lineNumber": 1023,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste nächste Horde bedient",
      "lineNumber": 1025,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 1061,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 1067,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT10C",
      "lineNumber": 1178,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT10D",
      "lineNumber": 1179,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT11B",
      "lineNumber": 1182,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT11C",
      "lineNumber": 1183,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT11D",
      "lineNumber": 1184,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ NICHT MT10B Bahn dreht",
      "lineNumber": 1229,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horden Ausfuhrtabelle. Reihe[1]. Bis Etage < Horden Ausfuhrtabelle. Reihe[1]. Von Etage}",
      "lineNumber": 1639,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "-1",
      "lineNumber": 1787,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste Reihe leer bedient",
      "lineNumber": 2033,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste nächste Horde bedient ]",
      "lineNumber": 2034,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste Reihe leer bedient",
      "lineNumber": 2038,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Drucktaste nächste Horde bedient",
      "lineNumber": 2039,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "-1",
      "lineNumber": 2155,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horden Ausfuhrtabelle. Reihe[0]. von Etage > 20 ]",
      "lineNumber": 2171,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horden Ausfuhrtabelle. Reihe[0]. von Reihe > 6 ]",
      "lineNumber": 2196,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 2202,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT40B",
      "lineNumber": 2436,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT40C",
      "lineNumber": 2437,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: MT40D",
      "lineNumber": 2438,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 2585,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 2617,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ IMMER 1",
      "lineNumber": 2702,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Aktuelle Position Horde N21 = 19",
      "lineNumber": 2807,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Meldung: Ein der Horden N21-N24 steht längere Zeit auf Etage 19/ Laserkontrolle ausgeschaltet ]",
      "lineNumber": 2808,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 2863,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: Gefüllte Etage Horde N21 ganz oben Salzlake",
      "lineNumber": 2984,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: Niveau in Hydraulikbehälter für Horde N21/N22 zu niedrig ??",
      "lineNumber": 2985,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horde N23 auf Position 19",
      "lineNumber": 3024,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Horde N24 auf Position 19",
      "lineNumber": 3025,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ] ??",
      "lineNumber": 3049,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ]",
      "lineNumber": 3074,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ]",
      "lineNumber": 3098,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ]",
      "lineNumber": 3122,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Störung: Gefüllte Etage N31 ganz oben Salzlake",
      "lineNumber": 3346,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ 2MP72 Störung",
      "lineNumber": 3522,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ Pumpe 2MP72 dreht",
      "lineNumber": 3550,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+1",
      "lineNumber": 3616,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ SCHRITT 5",
      "lineNumber": 3626,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ NICHT Käsekode besteht]",
      "lineNumber": 3633,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ 2LCP31-002-HS: Drucktaste Hebevorrichtung Horde 2N51 auf",
      "lineNumber": 3676,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "+ 2LCP31-003-HS: Drucktaste Hebevorrichtung Horde 2N51 nieder",
      "lineNumber": 3683,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Horde Status*",
      "lineNumber": 4066,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Datum und Zeit*",
      "lineNumber": 4067,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Aktuelle Salzungszeit*",
      "lineNumber": 4068,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Käsesorte 1e Käse in Horde*",
      "lineNumber": 4069,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Chargenummer 1e Käse in Horde*",
      "lineNumber": 4070,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Käsesorte letzte Käse in Horde*",
      "lineNumber": 4071,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Chargenummer letzte Käse in Horde*",
      "lineNumber": 4072,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Letzte aktive Etage*",
      "lineNumber": 4073,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Letzte aktive Reihe*",
      "lineNumber": 4074,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Horde auf Handbedienung*",
      "lineNumber": 4075,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Horde ausgeschaltet*",
      "lineNumber": 4076,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Status*",
      "lineNumber": 4078,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Besonderheit*",
      "lineNumber": 4079,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Käsesorte*",
      "lineNumber": 4080,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Chargenummer*",
      "lineNumber": 4081,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Datum/Zeit*",
      "lineNumber": 4082,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Anzahl Käse*",
      "lineNumber": 4083,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "- *Aktuelle Salzungszeit*",
      "lineNumber": 4084,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "conditions",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "suggestedGroup": "conditions",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as conditions"
      ]
    },
    {
      "originalLine": "Zeit 7sek??",
      "lineNumber": 415,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "Zeit 7sek??",
      "lineNumber": 419,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "Zeit 7sek??",
      "lineNumber": 424,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "Zeit 5sek??",
      "lineNumber": 671,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "Zeit 60sek ??",
      "lineNumber": 742,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8692307692307693,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "ZEIT 5sek??",
      "lineNumber": 763,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "ZEIT 30sek??",
      "lineNumber": 1269,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8916666666666666,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "ZEIT 5sek??",
      "lineNumber": 1475,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "ZEIT 5sek??",
      "lineNumber": 1494,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "Zeit 5sek??",
      "lineNumber": 2796,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.8863636363636364,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Strömung Einfuhrrinne N10/N11: Strömung Einfuhrrinne N10/N11 OKStaumeldung Einfuhrrinne (N10-201)Zeit 7sek?? |",
      "lineNumber": 3717,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6260330578512396,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Strömung Einfuhrrinne N10/N11: Strömung Einfuhrrinne N10/N11 OKNICHT Staumeldung Einfuhrrinne (N10-201)Zeit 7sek?? |",
      "lineNumber": 3718,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6240458015267175,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Strömung Einfuhrrinne N10/N11: Strömung Einfuhrrinne N10/N11 OKStaumeldung Einfuhrrinne (N11-201)Zeit 7sek?? |",
      "lineNumber": 3720,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6260330578512396,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Strömung Einfuhrrinne N10/N11 Strömung: Einfuhrrinne N10/N11 OKNICHT Staumeldung Einfuhrrinne (N11-201)Zeit 7sek?? |",
      "lineNumber": 3721,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6240458015267175,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 1Käse am Blockierung der Einfuhrrinne N10 (N10-202)Strömung Einfuhrrinne N10: Strömung Einfuhrrinne N10/N11 OKZEIT 5sek?? |",
      "lineNumber": 3756,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6221830985915493,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3MT10C Bahn drehtNICHT Einfuhrbahn T10C oben (T10-206)ZEIT 5sek??+SCHRITT 4-5NICHT Einfuhrbahn T10C oben (T10-206) |",
      "lineNumber": 3841,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6233333333333333,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 7MT10C Bahn drehtNICHT Einfuhrbahn T10C unten (T10-205)ZEIT 5sek??+RUHE + SCHRITT 1NICHT Einfuhrbahn T10C unten (T10-205) |",
      "lineNumber": 3847,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "zeitPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+\\s*sek/",
      "suggestedGroup": "zeitPatterns",
      "confidence": 0.6221830985915493,
      "reasoning": [
        "Intelligently categorized as zeitPatterns"
      ]
    },
    {
      "originalLine": "3.1.1\tHauptprogramm Einfuhr FB100\t6",
      "lineNumber": 201,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.2\tSelektionsprogramm Horde für Einfuhr FB102\t9",
      "lineNumber": 202,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.649,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.3\tEinfuhrwagen T10 nach Reinigungsposition FB104\t13",
      "lineNumber": 203,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6509090909090909,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.4\tReinigung Einfuhrwagen T10 FB106\t14",
      "lineNumber": 204,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6682926829268292,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.5\tKommunikation nach K5 FB108\t15",
      "lineNumber": 205,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6777777777777777,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.6\tKäsezähler Anfang T10B FB110\t16",
      "lineNumber": 206,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.7\tKäsezähler Anfang T11B FB112\t17",
      "lineNumber": 207,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.8\tKäsezähler Ende T10B FB114\t18",
      "lineNumber": 208,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6799999999999999,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.9\tKäsezähler Ende T11B FB116\t18",
      "lineNumber": 209,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6799999999999999,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.10\tSortentrennung N10 FB118\t19",
      "lineNumber": 210,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.11\tSortentrennung N11 FB120\t20",
      "lineNumber": 211,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.1.12\tFüllen Horde Reihe für Reihe FB124\t23",
      "lineNumber": 212,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6636363636363636,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.3\tT10: Füllen Horde  FB134\t29",
      "lineNumber": 216,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6848484848484848,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.4\tT11: Füllen Horde  FB136\t31",
      "lineNumber": 217,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6848484848484848,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.5\tT10: Positionieren Einfuhrwagen  FB138\t33",
      "lineNumber": 218,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6595744680851063,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.6\tT10: Transport MT10D Einfuhrwagen  FB140\t35",
      "lineNumber": 219,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.7\tT10: Transportbahn T10A FB142\t37",
      "lineNumber": 220,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6736842105263158,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.8\tT10: Transportbahn T11A FB144\t39",
      "lineNumber": 221,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6736842105263158,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.9\tT10: Transportbahn Käse Anfuhr T10B FB146\t40",
      "lineNumber": 222,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6559999999999999,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.10\tT10: Transportbahn Käse Anfuhr T11B FB148\t43",
      "lineNumber": 223,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6549019607843137,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.11\tT10: Transportbahn Käse Abfuhr T10B FB150\t44",
      "lineNumber": 224,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6549019607843137,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.12\tT10: Transportbahn Käse Abfuhr T11B FB152\t44",
      "lineNumber": 225,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6549019607843137,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.2.13\tT10: Transportbahn positionieren T10C FB154\t45",
      "lineNumber": 226,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6528301886792452,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "3.3.1\tStrömung Einfuhrrinne N10/N11 FB160\t48",
      "lineNumber": 229,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6636363636363636,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.1.2\tSelektionsprogramm Horden für Ausfuhr FB202\t53",
      "lineNumber": 233,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6538461538461539,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.1.3\tHorden Ausfuhrtabelle füllen/entleeren FB204\t55",
      "lineNumber": 234,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6528301886792452,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.1.4\tAusfuhrwagen T40 von Bad nach Reinigungsposition FB206\t56",
      "lineNumber": 235,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6444444444444444,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.1.5\tReserviert FB208\t58",
      "lineNumber": 236,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.712,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.1.6\tReinigung Ausfuhrwagen T40 FB210\t59",
      "lineNumber": 237,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6682926829268292,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.2.1\tT40: Entleeren Horde Reihe für Reihe FB230\t61",
      "lineNumber": 240,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6549019607843137,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.2.2\tT40: Positionieren Haken T40 FB232\t68",
      "lineNumber": 241,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6651162790697674,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.2.4\tT40: Transport MT40D Ausfuhrwagen FB236\t72",
      "lineNumber": 243,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6583333333333333,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.2.5\tT40: Transportbahn T40A FB238\t74",
      "lineNumber": 244,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6736842105263158,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.2.6\tT40: Transportbahn T40B FB240\t76",
      "lineNumber": 245,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6736842105263158,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "4.3.1\tStrömung Ausfuhrrinne N40 FB260\t78",
      "lineNumber": 247,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.1\tN21 Füllen Horde FB300\t79",
      "lineNumber": 250,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6903225806451613,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.3\tN23 Füllen Horde FB304\t81",
      "lineNumber": 252,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6903225806451613,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.4\tN24 Füllen Horde FB306\t81",
      "lineNumber": 253,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6903225806451613,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.5\tN21: Umschwimmen Horde nach N31 FB308\t82",
      "lineNumber": 254,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6608695652173913,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.6\tN22: Umschwimmen Horde nach N32 FB310\t85",
      "lineNumber": 255,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6608695652173913,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.1.8\tN24: Umschwimmen Horde nach N34 FB314\t85",
      "lineNumber": 257,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6608695652173913,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.2.1\tHorde N21 Heben/Senken FB350\t87",
      "lineNumber": 260,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.2.2\tHorde N22 Heben/Senken FB352\t90",
      "lineNumber": 261,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.2.3\tHorde N23 Heben/Senken FB354\t90",
      "lineNumber": 262,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.2.4\tHorde N24 Heben/Senken FB356\t90",
      "lineNumber": 263,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "5.3.2\tStrömungspumpe P03 FB392\t94",
      "lineNumber": 267,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6848484848484848,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.1.1\tEntleeren Horde N31 FB400\t95",
      "lineNumber": 270,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.1.2\tEntleeren Horde N32 FB402\t96",
      "lineNumber": 271,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.1.3\tEntleeren Horde N33 FB404\t96",
      "lineNumber": 272,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.1.4\tEntleeren Horde N34 FB406\t97",
      "lineNumber": 273,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6823529411764706,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.2.1\tHorde N31 Heben/Senken FB450\t99",
      "lineNumber": 275,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.2.2\tHorde N32 Heben/Senken FB452\t101",
      "lineNumber": 276,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6828947368421052,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.2.3\tHorde N33 Heben/Senken FB454\t101",
      "lineNumber": 277,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6828947368421052,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.2.4\tHorde N34 Heben/Senken FB456\t101",
      "lineNumber": 278,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6828947368421052,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.3.1\tStrömungsjets 2N11-2N14-101 FB490\t101",
      "lineNumber": 280,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6732558139534883,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "6.3.2\tStrömungspumpe P04 FB492\t102",
      "lineNumber": 281,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6926470588235294,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "7.1\tStrömung Salzbad N20 FB500\t103",
      "lineNumber": 283,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6926470588235294,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "7.2\tEntleeren Salzbad/Füllen Puffertank FB504\t104",
      "lineNumber": 284,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6642857142857143,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "8.1\tDatenübertragung mit K5       FB550\t107",
      "lineNumber": 286,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6732558139534883,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "8.2\tChargedaten N10        FB552\t108",
      "lineNumber": 287,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6875,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "10\tHordedaten       FB701-FB734\t111",
      "lineNumber": 289,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.69,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "11.1\tHandbedienung Horde 2N51     FB2100\t112",
      "lineNumber": 291,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6795454545454546,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "HAND T10",
      "lineNumber": 1085,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "HAND T10",
      "lineNumber": 1092,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "HAND T10",
      "lineNumber": 1364,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "HAND T10",
      "lineNumber": 1382,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "HAND T10",
      "lineNumber": 1391,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "T40: Positionieren Ausfuhrwagen RUHE",
      "lineNumber": 1856,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.6486111111111111,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "NICHT N21-101 auf Automat (N21-101 HAND)",
      "lineNumber": 2769,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.67875,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "NICHT P04 HAND",
      "lineNumber": 3403,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "technicalStatus",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "suggestedGroup": "technicalStatus",
      "confidence": 0.825,
      "reasoning": [
        "Intelligently categorized as technicalStatus"
      ]
    },
    {
      "originalLine": "Horde[Vorselektierte Horde für 1e Befüllung].Status = 4",
      "lineNumber": 442,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Vorselektierte Horde für 1e Befüllung].Status = 0",
      "lineNumber": 444,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable 1 (Aktive Einfuhrhorde) = 21",
      "lineNumber": 541,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable 1 (Aktive Einfuhrhorde) = 22",
      "lineNumber": 543,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable 1 (Aktive Einfuhrhorde) = 23",
      "lineNumber": 545,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable 1 (Aktive Einfuhrhorde) = 24",
      "lineNumber": 547,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage = 20",
      "lineNumber": 555,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktive Einfuhrhorde = 24",
      "lineNumber": 567,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage = 20",
      "lineNumber": 584,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktive Einfuhrhorde = 22",
      "lineNumber": 592,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktive Einfuhrhorde = 23",
      "lineNumber": 595,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktive Einfuhrhorde = 24",
      "lineNumber": 598,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen = 55 (Reinigungsposition)",
      "lineNumber": 657,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen = 55 (Reinigungsposition)",
      "lineNumber": 682,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sortenwechsel (Besonderheit = 0) (Komm. von K5)",
      "lineNumber": 749,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen T10 = Erwünschte Position Einfuhrwagen T10",
      "lineNumber": 793,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen T10 = Erwünschte Position Einfuhrwagen T10",
      "lineNumber": 844,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N23 = Erwünschte Position Horde N23",
      "lineNumber": 856,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage >= 1",
      "lineNumber": 872,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage <= 20",
      "lineNumber": 873,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihen >= Pos 1 (Reihen 1, 4)",
      "lineNumber": 874,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihen <= Pos 3 (Reihen 3, 6)",
      "lineNumber": 875,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage = 20",
      "lineNumber": 885,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihen = Pos 1 (Reihen 1 & 4)",
      "lineNumber": 886,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage = 20",
      "lineNumber": 888,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Zähler 1 (Anzahl Käse vorbei Zahlpunkt Anfang T10B) >= 28",
      "lineNumber": 1021,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable_1 (Anzahl Käse am T10B anwesend) <=  0",
      "lineNumber": 1028,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Variable_1 (Anzahl Käse am T10B anwesend)  >=  Variable_2 (Maximum Anzahl Käse auf T10B)",
      "lineNumber": 1079,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position >= 1 (N21 pos 1 (reihe 1&4) )",
      "lineNumber": 1190,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position <= 12 (N24 pos 3 (reihe 3&6) )",
      "lineNumber": 1191,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position = 55 (Reinigungsposition)",
      "lineNumber": 1193,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Etage >= 1}",
      "lineNumber": 1613,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 6",
      "lineNumber": 1616,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 1",
      "lineNumber": 1622,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe >= 1",
      "lineNumber": 1626,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe <= 6 }",
      "lineNumber": 1627,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Bis Etage <= Horden Ausfuhrtabelle. Reihe[1]. Von Etage",
      "lineNumber": 1629,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Bis Reihe <= Horden Ausfuhrtabelle. Reihe[1]. Von Reihe",
      "lineNumber": 1635,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Bis Reihe >= Horden Ausfuhrtabelle. Reihe[1]. Von Reihe]",
      "lineNumber": 1638,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Bis Reihe <= 6 }",
      "lineNumber": 1641,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 1",
      "lineNumber": 1648,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 2 = 0",
      "lineNumber": 1649,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 3 = 0",
      "lineNumber": 1650,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 2",
      "lineNumber": 1655,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 3 = 0",
      "lineNumber": 1656,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 4 = 0",
      "lineNumber": 1657,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 5 = 0",
      "lineNumber": 1658,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 3",
      "lineNumber": 1661,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 4 = 0",
      "lineNumber": 1662,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 5 = 0",
      "lineNumber": 1663,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 6 = 0",
      "lineNumber": 1664,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 4",
      "lineNumber": 1666,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 6 = 0",
      "lineNumber": 1671,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 6",
      "lineNumber": 1673,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 1",
      "lineNumber": 1675,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 2",
      "lineNumber": 1677,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 2 = 0",
      "lineNumber": 1682,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 3",
      "lineNumber": 1684,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 2 = 0",
      "lineNumber": 1686,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 4",
      "lineNumber": 1688,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 2 = 0",
      "lineNumber": 1690,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe = 5",
      "lineNumber": 1693,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 1 = 0",
      "lineNumber": 1694,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 3 = 0",
      "lineNumber": 1696,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 1 = 0",
      "lineNumber": 1700,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 3 = 0",
      "lineNumber": 1702,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].Von Etage.Anzahl Käse Reihe 5 = 0",
      "lineNumber": 1704,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Hordenummer = 33",
      "lineNumber": 1731,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Hordenummer = 34",
      "lineNumber": 1734,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Hordenummer >=31",
      "lineNumber": 1746,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Keine aktive Horde (Horden Ausfuhrtabelle. Reihe[0]. Hordenummer = 0)",
      "lineNumber": 1761,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen = ?? (Zwischenposition)",
      "lineNumber": 1836,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen = ?? (Reinigungsposition)",
      "lineNumber": 1863,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen = ?? (Reinigungsposition)",
      "lineNumber": 1900,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen T40 = Erwünschte Position Ausfuhrwagen T40",
      "lineNumber": 1947,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N33 = Erwünschte Position Horde N33",
      "lineNumber": 1991,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen T40 = Erwünschte Position Ausfuhrwagen T40",
      "lineNumber": 1998,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N31 = Erwünschte Position Horde N31",
      "lineNumber": 2001,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N34 = Erwünschte Position Horde N34 ]",
      "lineNumber": 2013,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen T40 = Erwünschte Position Ausfuhrwagen T40",
      "lineNumber": 2047,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N31 = Erwünschte Position Horde N31",
      "lineNumber": 2050,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N32 = Erwünschte Position Horde N32",
      "lineNumber": 2054,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N33 = Erwünschte Position Horde N33",
      "lineNumber": 2058,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N34 = Erwünschte Position Horde N34]",
      "lineNumber": 2062,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage >= 1",
      "lineNumber": 2078,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage <= 20",
      "lineNumber": 2079,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe >= 1",
      "lineNumber": 2080,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe = 1",
      "lineNumber": 2091,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage = Horden Ausfuhrtabelle. Reihe[0]. Bis Etage",
      "lineNumber": 2093,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe = Horden Ausfuhrtabelle. Reihe[0]. Bis Reihe",
      "lineNumber": 2094,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe = 1",
      "lineNumber": 2100,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe = 6",
      "lineNumber": 2103,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Etage = Horden Ausfuhrtabelle. Reihe[0]. Bis Etage",
      "lineNumber": 2114,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe = Horden Ausfuhrtabelle. Reihe[0]. Bis Reihe",
      "lineNumber": 2115,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1].Hordenummer >= 31",
      "lineNumber": 2116,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1].Hordenummer <= 34",
      "lineNumber": 2117,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1].Hordenummer >= 31",
      "lineNumber": 2119,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. von Reihe >=1",
      "lineNumber": 2182,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. von Reihe <=6",
      "lineNumber": 2183,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Besonderheit in Reihe = Störung",
      "lineNumber": 2229,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Besonderheit in Reihe = Sortentrennung",
      "lineNumber": 2236,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Besonderheit in Reihe = Erste Käse der Produktionstag",
      "lineNumber": 2243,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Position T40 [mm] >= Sollwert Zwischenposition [mm] - Marge [mm]",
      "lineNumber": 2399,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Position T40 [mm] <= Sollwert Zwischenposition [mm] + Marge [mm]",
      "lineNumber": 2401,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position >= 1 (N31 Reihe 1)",
      "lineNumber": 2474,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position <= 24 (N34 Reihe 6)",
      "lineNumber": 2475,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position = 55?? (Reinigungsposition)",
      "lineNumber": 2477,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position = 56?? (Zwischenposition)",
      "lineNumber": 2479,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N31 = Erwünschte Position Horde N31",
      "lineNumber": 2781,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N21 = Erwünschte Position Horde N21",
      "lineNumber": 2798,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Ausgewählte Horde = 21",
      "lineNumber": 2896,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Ausgewählte Horde = 23",
      "lineNumber": 2907,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Ausgewählte Horde = 23",
      "lineNumber": 2910,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Ausgewählte Horde = 24",
      "lineNumber": 2914,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Ausgewählte Horde = 24",
      "lineNumber": 2917,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] <= Sollwert Position [mm] + Marge [mm]",
      "lineNumber": 2952,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position >=1",
      "lineNumber": 2977,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position <= 21",
      "lineNumber": 2978,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde vorselektiert (Horden Ausfuhrtabelle. Reihe[1]. Hordenummer = 31)",
      "lineNumber": 3199,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde N31 ist ganz leer (Status = 0)",
      "lineNumber": 3238,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Käse in Horde N31 (Status = 1, gefüllt (gelb))",
      "lineNumber": 3258,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Horde aktiv (Horden Ausfuhrtabelle. Reihe[0]. Hordenummer = 31)",
      "lineNumber": 3270,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] >= Sollwert Position [mm] – Marge [mm]",
      "lineNumber": 3302,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] <= Sollwert Position [mm] + Marge [mm]",
      "lineNumber": 3315,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position N31 = 21 (unterste Position)",
      "lineNumber": 3325,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position >=1",
      "lineNumber": 3340,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Sollwert Position <= 21",
      "lineNumber": 3341,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Geschwindigkeit MP01 = Einstellung Strömung MP01 bei Einfuhr",
      "lineNumber": 3471,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Geschwindigkeit MP02 = Einstellung Strömung MP02 bei Einfuhr",
      "lineNumber": 3487,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Istwert Niveau <= LSL-Niveau",
      "lineNumber": 3493,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Chargenummer (Komm. von K5) = 0",
      "lineNumber": 3590,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Käsekode (Komm. von K5)  = 0",
      "lineNumber": 3591,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Komm. von K5)  = 0",
      "lineNumber": 3592,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Käsekode (Komm. von K2)  = 0",
      "lineNumber": 3622,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Komm. von K2)  = 0",
      "lineNumber": 3623,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Neue Chargedaten) = 0",
      "lineNumber": 3639,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "x = Überarbeitungsschreiben ↑",
      "lineNumber": 3697,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variableAssignments",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "suggestedGroup": "variableAssignments",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as variableAssignments"
      ]
    },
    {
      "originalLine": "Freigabe Start Einfuhr",
      "lineNumber": 322,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.759090909090909,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Freigabe Einfuhrwagen nach Reinigungsposition",
      "lineNumber": 646,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6777777777777777,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Freigabe Reinigung T10",
      "lineNumber": 668,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.759090909090909,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Blockierung Geschlossen (N10-100)",
      "lineNumber": 989,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.7378787878787878,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Blockierung Geöffnet (N10-100)",
      "lineNumber": 997,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.7516666666666667,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: MT10A",
      "lineNumber": 1176,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: MT11A",
      "lineNumber": 1181,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung Laser (T10-900-GTP): Synchronfehler",
      "lineNumber": 1186,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6732558139534883,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung Käse am Ende Einfuhrbahn T10A nicht erwartet (T10-202)",
      "lineNumber": 1354,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6508064516129032,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse am Ende Einfuhrwagen T10B erwartet (T10-204)",
      "lineNumber": 1411,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6482758620689655,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Einfuhrbahn T10C unten erwartet (T10-205)",
      "lineNumber": 1468,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6559999999999999,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Pumpe MP10 von Einfuhrrinne N20 nach Salzbad",
      "lineNumber": 1514,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6528301886792452,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Analog Eingang N20-400-PT (Niveaumessung in Wanne)",
      "lineNumber": 1516,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6474576271186441,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Hoch Niveau Einfuhrrinne N20",
      "lineNumber": 1524,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6756756756756757,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Zirkulationspumpe MP63 nach Einfuhrrinne N09/N20",
      "lineNumber": 1526,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6491228070175439,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Freigabe Ausfuhrwagen von Bad nach Reinigungsposition",
      "lineNumber": 1820,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6660377358490566,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Freigabe Reinigung T40",
      "lineNumber": 1885,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.759090909090909,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Haken T40 unten erwartet (T40-202)",
      "lineNumber": 2308,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6651162790697674,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung:MT40A",
      "lineNumber": 2435,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.8153846153846154,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Start Positionieren (RUHE&SCHRITT 1)",
      "lineNumber": 2489,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6680555555555555,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse auf 2e Teil Ausfuhrbahn T40A (Käsezähler) erwartet (T40-200)",
      "lineNumber": 2502,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6378378378378378,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse auf 2e Teil Ausfuhrbahn T40A (Käsezähler) nicht erwartet (T40-200)",
      "lineNumber": 2504,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.635,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: 1e Teil Ausfuhrbahn T40A nicht in richtige Position (T40-205/206) ]",
      "lineNumber": 2506,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6368421052631579,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: 1e Teil Ausfuhrbahn T40A nicht in richtige Position (T40-204/205) ]",
      "lineNumber": 2512,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6368421052631579,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse in Rinne N40 hinten Ausfuhrbahn T40B erwartet (T40-201)",
      "lineNumber": 2573,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6405797101449275,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse in Rinne N40 hinten Ausfuhrbahn T40B nicht erwartet (T40-201)",
      "lineNumber": 2575,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6373333333333333,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: 2e Teil Ausfuhrbahn T40B nicht in richtige Position (T40-206/207) ]",
      "lineNumber": 2577,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6368421052631579,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: 2e Teil Ausfuhrbahn T40B nicht in richtige Position (T40-206/207) ]",
      "lineNumber": 2583,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6368421052631579,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Käse in Rinne N40 hinten Ausfuhrbahn T40B erwartet (T40-201)",
      "lineNumber": 2590,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6405797101449275,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung Laser (N21-900-GTP): Synchronfehler",
      "lineNumber": 2980,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6732558139534883,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Pumpe Strömungsjets Einfuhr P03",
      "lineNumber": 3183,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Gefüllte Etage Horde N31 ganz oben Salzlake",
      "lineNumber": 3349,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6538461538461539,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Start Positionieren (RUHE&SCHRITT 1)",
      "lineNumber": 3374,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6680555555555555,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Zirkulationspumpe Salzbad MP02",
      "lineNumber": 3477,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6717948717948717,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Pumpe 2MP62 Pumpe von Salzbad nach Puffertanks",
      "lineNumber": 3532,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6509090909090909,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Pumpe 2MP72 Pumpe von Salzbad nach Puffertanks",
      "lineNumber": 3540,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6509090909090909,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "Störung: Analog Eingang 2N17-400-PT (Niveaumessung in Salzbad)",
      "lineNumber": 3542,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "industrialPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "suggestedGroup": "industrialPatterns",
      "confidence": 0.6451612903225806,
      "reasoning": [
        "Intelligently categorized as industrialPatterns"
      ]
    },
    {
      "originalLine": "1\tVersionsgeschichte\t5",
      "lineNumber": 197,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6477272727272727,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "2\tDokumentation\t5",
      "lineNumber": 198,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6617647058823529,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "3\tEinfuhr\t6",
      "lineNumber": 199,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6954545454545454,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "3.1\tHauptprogramme\t6",
      "lineNumber": 200,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "3.2\tMaschineteile Einfuhr\t27",
      "lineNumber": 213,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.65,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "3.3\tNiveauregelung und Strömung\t48",
      "lineNumber": 228,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6411764705882352,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "4.1\tHauptprogramme\t49",
      "lineNumber": 231,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6666666666666666,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "4.2\tMaschineteile Ausfuhr\t61",
      "lineNumber": 239,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.65,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "4.3\tNiveauregelung und Strömung\t78",
      "lineNumber": 246,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6411764705882352,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "5\tEinfuhrhorden N21-N24\t79",
      "lineNumber": 248,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "5.1\tHauptprogramme\t79",
      "lineNumber": 249,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6666666666666666,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "5.2\tMaschineteile\t87",
      "lineNumber": 259,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "6\tAusfuhrHorden N31-N34\t95",
      "lineNumber": 268,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "6.1\tHauptprogramme\t95",
      "lineNumber": 269,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6666666666666666,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "6.2\tMaschineteile\t99",
      "lineNumber": 274,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "6.3\tStrömung\t101",
      "lineNumber": 279,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6875,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "7\tSalzbad N20\t103",
      "lineNumber": 282,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6617647058823529,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "8\tChargedaten\t107",
      "lineNumber": 285,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6617647058823529,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "9\tKäserezept        FC600\t110",
      "lineNumber": 288,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "11\tSalzbad 2.2: Horden 2N51/2N52/2N53\t112",
      "lineNumber": 290,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numberingPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/^\\d+\\.\\d+/",
      "suggestedGroup": "numberingPatterns",
      "confidence": 0.6341463414634146,
      "reasoning": [
        "Intelligently categorized as numberingPatterns"
      ]
    },
    {
      "originalLine": "1KA-…..x[1]",
      "lineNumber": 313,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7272727272727273,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Vorselektierte Etage für 1e Befüllung  > Horde[Vorselektierte Horde für 1e Befüllung].Letzte gefüllte Etage",
      "lineNumber": 400,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7275700934579439,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage < 20",
      "lineNumber": 552,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7386792452830189,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= [Aktive Einfuhrhorde].Letzte aktive Etage +1",
      "lineNumber": 577,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7597826086956522,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Etage für vorselektierte Horde < Horde[Vorselektierte Horde].Letzte gefüllte Etage",
      "lineNumber": 638,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6827956989247311,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde[aktive Einfuhrhorde].Etage_Daten[Erwünschte Etage].Reihe_Daten[1].Anzahl Käse > 0",
      "lineNumber": 974,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6844827586206896,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] < Sollwert Position [mm]",
      "lineNumber": 1152,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] > Sollwert Position [mm]",
      "lineNumber": 1161,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Reihe > 1",
      "lineNumber": 1624,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6608695652173913,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "{ Horden Ausfuhrtabelle. Reihe[1]. Bis Etage = Horden Ausfuhrtabelle. Reihe[1]. Von Etage",
      "lineNumber": 1633,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6314606741573033,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Von Etage >=",
      "lineNumber": 1645,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6622222222222222,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde[Horden Ausfuhrtabelle. Reihe[1]. Hordenummer].letzte entleerte Etage",
      "lineNumber": 1646,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7513513513513513,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[1]",
      "lineNumber": 1775,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[0]",
      "lineNumber": 1776,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[2]",
      "lineNumber": 1777,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[1]",
      "lineNumber": 1778,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[3]",
      "lineNumber": 1779,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[2]",
      "lineNumber": 1780,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[4]",
      "lineNumber": 1781,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[5]",
      "lineNumber": 1783,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[4]",
      "lineNumber": 1784,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[5]",
      "lineNumber": 1786,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[6]",
      "lineNumber": 1791,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[0]",
      "lineNumber": 1792,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[1]",
      "lineNumber": 1794,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[2]",
      "lineNumber": 1796,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[6]",
      "lineNumber": 1797,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[6]",
      "lineNumber": 1799,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Ausfuhrtabelle.Ausfuhrtabelle[6]",
      "lineNumber": 1801,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Ausfuhrtabelle.Ausfuhrtabelle[5]",
      "lineNumber": 1802,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7859375,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Etage < Horden Ausfuhrtabelle. Reihe[0]. Bis Etage",
      "lineNumber": 2096,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6459016393442623,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Horden Ausfuhrtabelle. Reihe[0]. von Etage",
      "lineNumber": 2164,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6636363636363636,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. von Etage > 0",
      "lineNumber": 2166,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6608695652173913,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. von Etage < 21",
      "lineNumber": 2167,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6595744680851063,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "[ Horden Ausfuhrtabelle. Reihe[0]. von Etage < 1",
      "lineNumber": 2170,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.840625,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Horden Ausfuhrtabelle. Reihe[0]. von Reihe",
      "lineNumber": 2180,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6636363636363636,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1",
      "lineNumber": 2186,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.840625,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1",
      "lineNumber": 2195,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.840625,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. Hordenummer..Etage[Erwünschte Etage].Reihe[Erwünschte Reihe].Anzahl Käse",
      "lineNumber": 2215,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6266666666666666,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. Hordenummer..Etage[Erwünschte Etage].Reihe[Erwünschte Reihe].Besonderheit",
      "lineNumber": 2217,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6264150943396226,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. Hordenummer..Etage[Erwünschte Etage].Reihe[Erwünschte Reihe].Akt_Salzungszeit_S",
      "lineNumber": 2219,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.625,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. Hordenummer..Etage[Erwünschte Etage].Reihe[Erwünschte Reihe].Akt_Salzungszeit_M",
      "lineNumber": 2221,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.625,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[0]. Hordenummer..Etage[Erwünschte Etage].Reihe[Erwünschte Reihe].Soll_Salzungszeit_M",
      "lineNumber": 2225,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6247787610619469,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] < Sollwert Position [mm]",
      "lineNumber": 2414,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] > Sollwert Position [mm]",
      "lineNumber": 2423,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde N21.Etage[20].Reihe[1].Anzahl Käse <> 0",
      "lineNumber": 2723,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde N21.Etage[20].Reihe[2].Anzahl Käse <> 0",
      "lineNumber": 2724,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde N21.Etage[20].Reihe[4].Anzahl Käse <> 0",
      "lineNumber": 2726,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horde N21.Etage[20].Reihe[6].Anzahl Käse <> 0",
      "lineNumber": 2728,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] <  Sollwert Position [mm]",
      "lineNumber": 2937,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6297872340425532,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] >  Sollwert Position [mm]",
      "lineNumber": 2948,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6297872340425532,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] N21 > Position letzte gefüllte Etage [mm] + Marge",
      "lineNumber": 3002,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6197183098591549,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[1]. Hordenummer <>31",
      "lineNumber": 3261,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[2]. Hordenummer <>31",
      "lineNumber": 3262,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[3]. Hordenummer <>31",
      "lineNumber": 3263,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[4]. Hordenummer <>31",
      "lineNumber": 3264,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Horden Ausfuhrtabelle. Reihe[5]. Hordenummer <>31",
      "lineNumber": 3265,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6571428571428571,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Istwert Position [mm] > Sollwert Position [mm]",
      "lineNumber": 3311,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "= Horden Ausfuhrtabelle. Reihe[1].Von Etage",
      "lineNumber": 3361,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6651162790697674,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| 1KA-…..x[1] | Bedienungs- und Sicherheitsvorkehrungen |",
      "lineNumber": 3709,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6245614035087719,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Aktive Einfuhrhorde | Speichern letzte gefüllte HordeSCHRITT 14&15Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage < 20 |",
      "lineNumber": 3734,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6587999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Aktive Einfuhrhorde + 1 | SCHRITT 14&15Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage = 20 |",
      "lineNumber": 3735,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = [Aktive Einfuhrhorde].Letzte aktive Etage +1 | Speichern letzte gefüllte EtageSCHRITT 14&15Horde[Aktive Einfuhrhorde].Letzte gefüllte Etage < 20 |",
      "lineNumber": 3740,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.649,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[1] | Ausfuhrtabelle.Ausfuhrtabelle[0] |",
      "lineNumber": 3866,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[2] | Ausfuhrtabelle.Ausfuhrtabelle[1] |",
      "lineNumber": 3867,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[3] | Ausfuhrtabelle.Ausfuhrtabelle[2] |",
      "lineNumber": 3868,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[4] | Ausfuhrtabelle.Ausfuhrtabelle[3] |",
      "lineNumber": 3869,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[5] | Ausfuhrtabelle.Ausfuhrtabelle[4] |",
      "lineNumber": 3870,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[5] |",
      "lineNumber": 3871,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[0] |",
      "lineNumber": 3875,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[1] |",
      "lineNumber": 3876,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[2] |",
      "lineNumber": 3877,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[3] |",
      "lineNumber": 3878,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[4] |",
      "lineNumber": 3879,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = Ausfuhrtabelle.Ausfuhrtabelle[6] | Ausfuhrtabelle.Ausfuhrtabelle[5] |",
      "lineNumber": 3880,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6815068493150684,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | [Käse in Rinne N40 hinten Ausfuhrbahn T40B (T40-201)Hauptprogramm Ausfuhr: NICHT Staumeldung Ausfuhrrinne N40Zeit (?? Sek)+Käse in Rinne N40 hinten Ausfuhrbahn T40B (T40-201)Hauptprogramm Ausfuhr: Staumeldung Ausfuhrrinne N40Zeit (?? Sek)]Hauptprogramm Ausfuhr: Ausfuhr aktiv |",
      "lineNumber": 3891,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.8904513888888889,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Hauptprogramm Ausfuhr: Pause Ausfuhr[ MT40A drehtNICHT Käse auf 1e Teil Ausfuhrbahn T40A (T40-200)Kein Käse auf 2e Teil Ausfuhrbahn T40B  (Käsezähler) (T40-201)Zeit ?? ] |",
      "lineNumber": 3940,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.8557692307692307,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Istwert Position [mm] N21 > Position letzte gefüllte Etage [mm] + MargeLetzte gefüllte Etage > 0 |",
      "lineNumber": 4005,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.6128440366972476,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | {Zeit Puls 1 Sek[Horde N21 auf definierte PositionHorde N22 auf definierte PositionHorde N23 auf definierte PositionHorde N24 auf definierte PositionZeit (1 Sek)]Laserkontrolle durch Horden N21-2N24 (NICHT N20-900-GTP)Zeit (0.5 Sek)NICHT Ein der Horden N21-N24 steht auf Etage 19} |",
      "lineNumber": 4011,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7744027303754266,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Umschwimmen Horde N21 nach N31 SCHRITT ??+[Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ] ??Aktive Horde N21 (Füllen Horde N21 Füllen Horde gestartet) |",
      "lineNumber": 4014,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Umschwimmen Horde N22 nach N32 SCHRITT 3+[Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ] Aktive Horde N22 (Füllen Horde N22 Füllen Horde gestartet) |",
      "lineNumber": 4017,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7772925764192139,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Umschwimmen Horde N22 nach 2N32 SCHRITT 16NICHT Pumpe P61 drehtZeit+NICHT Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe[NICHT Zeit (Ausschaltverzögerung 3 Sek)Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+Andere Horde beschäftigt mit umschwimmen:+ Strömungsjet für Horde N21 öffnen (N21-300)+ Strömungsjet für Horde N23 öffnen (N23-300)+ Strömungsjet für Horde N24 öffnen (N24-300)]NICHT Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmtAktive Horde N22 (Füllen Horde N22 Füllen Horde gestartet)+Umschwimmen Horde N22 nach N32 RUHE+1+2Horde N22 wird nicht gefüllt (Füllen Horde N22 NICHT Füllen Horde gestartet) |",
      "lineNumber": 4018,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7458778625954199,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Umschwimmen Horde N23 nach N33 SCHRITT 3+[Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ] Aktive Horde N23 (Füllen Horde N23 Füllen Horde gestartet) |",
      "lineNumber": 4020,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7772925764192139,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Umschwimmen Horde N23 nach N33 SCHRITT 16NICHT Pumpe 2P61 drehtZeit+NICHT Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe[NICHT Zeit (Ausschaltverzögerung 3 Sek)Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+Andere Horde beschäftigt mit umschwimmen:+ Strömungsjet für Horde N11 öffnen (N11-300)+ Strömungsjet für Horde N12 öffnen (N12-300)+ Strömungsjet für Horde N14 öffnen (N14-300)]NICHT Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmtAktive Horde N23 (Füllen Horde N23 Füllen Horde gestartet)+Umschwimmen Horde N23 nach N33 RUHE+1+2Horde N23 wird nicht gefüllt (Füllen Horde N23 NICHT Füllen Horde gestartet) |",
      "lineNumber": 4021,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7458778625954199,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Umschwimmen Horde N24 nach N34 SCHRITT 3+[Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+ Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmt ] Aktive Horde N24 (Füllen Horde N24 Füllen Horde gestartet) |",
      "lineNumber": 4023,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7772925764192139,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Umschwimmen Horde N24 nach N34 SCHRITT 16NICHT Pumpe P61 drehtZeit+NICHT Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe[NICHT Zeit (Ausschaltverzögerung 3 Sek) Öffnen Strömungsjet für Horde wenn letzte Käse in Reihe+Andere Horde beschäftigt mit umschwimmen:+ Strömungsjet für Horde N21 öffnen (N21-300)+ Strömungsjet für Horde N22 öffnen (N22-300)+ Strömungsjet für Horde N23 öffnen (N23-300)]NICHT Öffnen Strömungsjet für Horde wenn Käse 1-11 einschwimmtAktive Horde N24 (Füllen Horde N24 Füllen Horde gestartet)+Umschwimmen Horde N24 nach 2N34 RUHE+1+2Horde N24 wird nicht gefüllt (Füllen Horde N24 NICHT Füllen Horde gestartet) |",
      "lineNumber": 4024,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.7461890243902438,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Istwert Position [mm] N31 > Position letzte aktive(entleerte) Etage [mm] + MargeLetzte aktive(entleerte) Etage > 0 |",
      "lineNumber": 4045,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.611023622047244,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | RUHE[Chargenummer (Komm. von K2) = 0Käsekode (Komm. von K2)  = 0Anzahl Käse (Komm. von K2)  = 0+Bedienungsfunktionen SB2.2 Einfuhr EIN (NUR BEI BAD 2.1B: 2T19)]+ SCHRITT 5 |",
      "lineNumber": 4064,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "arrayPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "suggestedGroup": "arrayPatterns",
      "confidence": 0.9016574585635359,
      "reasoning": [
        "Intelligently categorized as arrayPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Reihen < Pos 3 (Reihen 3 & 6)",
      "lineNumber": 901,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.62625,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "= Pos 1 (Reihen 1 & 4)",
      "lineNumber": 947,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6477272727272727,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "= Pos 3 (Reihen 4 & 6)",
      "lineNumber": 954,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6477272727272727,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden N21/N31 unten (N21-101)",
      "lineNumber": 2664,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden N21/N31 unten (N21-101)",
      "lineNumber": 2763,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden N21/N31 oben (N21-101)",
      "lineNumber": 2790,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6296610169491526,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "NICHT Tür und Strömungsjet zwischen Horden N21/N31 unten (N21-101)",
      "lineNumber": 2791,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6265151515151515,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden N21/N31 oben (N21-101)",
      "lineNumber": 2800,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6296610169491526,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden N21/N31 unten (N21-101)",
      "lineNumber": 2822,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Pos. 1\tHorde auf Etage 1(unterste Etage) für Ein- oder Ausschwimmen, Horde steht in oberste Position",
      "lineNumber": 2967,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Horde während Aufstellen oder Warten nicht aus Ausfuhrtabelle entfernt:",
      "lineNumber": 3303,
      "analysis": {
        "hasNumbers": false,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6295774647887323,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Horde während Aufstellen oder Warten aus Ausfuhrtabelle entfernt:",
      "lineNumber": 3324,
      "analysis": {
        "hasNumbers": false,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6323076923076922,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Pos. 1\tHorde auf Etage 1(unterste Etage) für Ein- oder Ausschwimmen, Horde steht in oberste Position",
      "lineNumber": 3330,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden 2N12/2N32 unten (2N12-101)",
      "lineNumber": 3394,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6277777777777778,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden 2N13/2N33 unten (2N13-101)",
      "lineNumber": 3397,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6277777777777778,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Tür und Strömungsjet zwischen Horden 2N14/2N34 unten (2N14-101)",
      "lineNumber": 3400,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6277777777777778,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "NICHT Tür und Strömungsjet zwischen Horden N21/N31 unten (N21-101)",
      "lineNumber": 3426,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6265151515151515,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "NICHT Tür und Strömungsjet zwischen Horden 2N23/2N33 unten (N23-101)",
      "lineNumber": 3432,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6257352941176471,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "NICHT Tür und Strömungsjet zwischen Horden N24/N34 unten (N24-101)",
      "lineNumber": 3435,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6265151515151515,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "NICHT Handbedienung oder Störung aktiv",
      "lineNumber": 3517,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6552631578947368,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Mit DT Anforderung wird das selektierte Rezept (1..50) kopiert nach HMI01 (Käserezept 0). In dieses Rezept 0 können die Daten eingegeben oder geändert werden.",
      "lineNumber": 3649,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6132911392405063,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Salzbad 2.2 ist das alte Salzbad mit 3 Horden 2N51, 2N52 und 2N53 die nur mit Handbedienung bedient werden über LCP-Schränke 2LCP-30 und 2LCP-31.",
      "lineNumber": 3672,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6120689655172413,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| **Version** | **Datum** | **Änderung** | **Durch** |",
      "lineNumber": 3699,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6194444444444445,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0.0.00 | 14-02-2020 | Eerste uitgave nieuwe Klokslag lay-out | E. Oevering |",
      "lineNumber": 3700,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6134615384615384,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0.0.01 | 10-03-2020 | Aangepaste kop- / voettekst | E. Oevering |",
      "lineNumber": 3701,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6156716417910447,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0.0.02 | 31-01-2022 | Lengte TAB voor STAP kleiner gemaakt (van 8 naar 6 cm) | E. Oevering |",
      "lineNumber": 3702,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6111702127659574,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "|  |  |  |  |",
      "lineNumber": 3703,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.7346153846153846,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "|  |  |  |  |",
      "lineNumber": 3704,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.7346153846153846,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "|  |  |  |  |",
      "lineNumber": 3705,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.7346153846153846,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| **Zeichnungen** | **Erklärung** |",
      "lineNumber": 3707,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.63,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| Stellenbeschreibung Projekt xxx | Funktionsbeschreibung |",
      "lineNumber": 3708,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6177966101694915,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "|  | Fahrplan |",
      "lineNumber": 3710,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6933333333333334,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0KA-….. x1 | P&ID |",
      "lineNumber": 3711,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.65,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0KA-….. x1 | Fließschema |",
      "lineNumber": 3712,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6375,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | DT Pause Einfuhr NICHT RUHE |",
      "lineNumber": 3714,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.62625,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | DT Start Einfuhr NICHT RUHE |",
      "lineNumber": 3715,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6238636363636363,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 21 | Horde N21 aktiv (SCHRITT 3) |",
      "lineNumber": 3723,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6276315789473684,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 22 | Horde N22 aktiv (SCHRITT 6) |",
      "lineNumber": 3724,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6276315789473684,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 23 | Horde N23 aktiv (SCHRITT 9) |",
      "lineNumber": 3725,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6276315789473684,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 24 | Horde N24 aktiv (SCHRITT 12) |",
      "lineNumber": 3726,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6269230769230769,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = \"N21 Hordedaten\".Horde_Daten.Letzte_aktive_Etage | Variable 1 (Aktive Einfuhrhorde) = 21 |",
      "lineNumber": 3729,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6111702127659574,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = \"N22 Hordedaten\".Horde_Daten.Letzte_aktive_Etage | Variable 1 (Aktive Einfuhrhorde) = 22 |",
      "lineNumber": 3730,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6111702127659574,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = \"N23 Hordedaten\".Horde_Daten.Letzte_aktive_Etage | Variable 1 (Aktive Einfuhrhorde) = 23 |",
      "lineNumber": 3731,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6111702127659574,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = \"N24 Hordedaten\".Horde_Daten.Letzte_aktive_Etage | Variable 1 (Aktive Einfuhrhorde) = 24 |",
      "lineNumber": 3732,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6111702127659574,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 21 | Vorselektierte Horde für 1e Befüllung > 24+ Vorselektierte Horde für 1e Befüllung < 21& Vorselektierte Horde für 1e Befüllung <> 0 |",
      "lineNumber": 3737,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6074468085106383,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | ??NICHT Käse am Blockierung der Einfuhrrinne N10 (N10-202) |",
      "lineNumber": 3753,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6147887323943662,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI01 |",
      "lineNumber": 3754,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI01 |",
      "lineNumber": 3757,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3-8DT Drucktaste nächste Reihe bedient (am HMI)NICHT Drucktaste nächste Etage bedientNICHT Drucktaste nächste Horde bedient |",
      "lineNumber": 3759,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6072916666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | SCHRITT 9 |",
      "lineNumber": 3760,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3-8NICHT Drucktaste nächste Reihe bedientNICHT Drucktaste nächste Horde bedientDT Nächste Etage (am HMI) |",
      "lineNumber": 3762,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6083999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | SCHRITT 9 |",
      "lineNumber": 3763,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3-8DT Nächste Horde (am HMI)NICHT Drucktaste nächste Reihe bedientNICHT Drucktaste nächste Etage bedient |",
      "lineNumber": 3765,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6083999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | SCHRITT 9 |",
      "lineNumber": 3766,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| +1 | Neue Etage bestimmen (SCHRITT 9&10)Nächste Etage nach dieser Reihe |",
      "lineNumber": 3769,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.614,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | Fertig (SCHRITT 12) |",
      "lineNumber": 3770,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| +1 | Neue Reihe bestimmen (SCHRITT 9&10)Einfuhrwagen neu positionieren nach diese ReiheNICHT Nächste Etage nach diese ReiheUngerade Etage |",
      "lineNumber": 3774,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6074468085106383,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| -1 | Neue Reihe bestimmen (SCHRITT 9&10)Einfuhrwagen neu positionieren nach diese ReiheNICHT Nächste Etage nach diese ReiheNICHT Ungerade Etage |",
      "lineNumber": 3775,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6071428571428571,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | Fertig (SCHRITT 12) |",
      "lineNumber": 3776,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 4-5Einfuhrbahn T10C unten (T10-205) |",
      "lineNumber": 3778,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.61875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungenHand HMI10 |",
      "lineNumber": 3779,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6205882352941177,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Pos Flank:  Käse für Horde beim Einfuhrwagen T10 (T10-207) |",
      "lineNumber": 3782,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.614,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| PT= | ~1Min |",
      "lineNumber": 3786,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| IN | Käse detektiertBahn MT10B dreht |",
      "lineNumber": 3788,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.62625,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| R | NICHT Käse detektiert |",
      "lineNumber": 3789,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| PT= | Zeit ~8Sek |",
      "lineNumber": 3790,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6525,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | RUHEZahler 1 < 0 |",
      "lineNumber": 3793,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6403846153846153,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | RUHE Zahler 2 < 0 |",
      "lineNumber": 3796,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6388888888888888,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| Zahler 1 (Anzahl Käse vorbei Zahlpunkt Ende T10B)  -  Zahler 2 (Anzahl Käse vorbei Zahlpunkt Ende T10B) | Immer 1 |",
      "lineNumber": 3798,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6089743589743589,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 6 | Immer 1 |",
      "lineNumber": 3800,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6617647058823529,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Zeit 2.Q (Käse nicht detektiert für Horde) |",
      "lineNumber": 3802,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.619090909090909,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND T10 |",
      "lineNumber": 3803,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | ?? NICHT Käse für Horde beim Einfuhrwagen T10 (T10-207) |",
      "lineNumber": 3805,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6154411764705883,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND T10 |",
      "lineNumber": 3806,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = (Vorselektierte Horde für 1e Befüllung – 21)* 5 + Erwünschte Reihe | T10: Füllen Horde Reihe für Reihe SCHRITT 1&2Einfuhr nicht aktiv (Hauptprogramm Einfuhr NICHT SCHRITT 3-5 |",
      "lineNumber": 3808,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6058333333333333,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = (Aktive Einfuhrhorde – 21)* 5 + Erwünschte Reihe | T10: Füllen Horde Reihe für Reihe SCHRITT 1&2Einfuhr aktiv (Hauptprogramm Einfuhr SCHRITT 3-5 |",
      "lineNumber": 3809,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.607,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 55 | Einfuhrwagen nach Reinigungsposition SCHRITT 1&2 |",
      "lineNumber": 3810,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6177966101694915,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Erwünschte Position Einfuhrwagen T10 | Start Positionieren (RUHE&SCHRITT 1) |",
      "lineNumber": 3812,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6129629629629629,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3??NICHT Käse am Ende Einfuhrbahn T10A (T10-202) |",
      "lineNumber": 3814,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6152173913043478,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI10 |",
      "lineNumber": 3815,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI10 |",
      "lineNumber": 3818,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI10 |",
      "lineNumber": 3821,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND T10 |",
      "lineNumber": 3824,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND T10 |",
      "lineNumber": 3829,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND T10 |",
      "lineNumber": 3832,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| PT= | ~8sec |",
      "lineNumber": 3839,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6699999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI10 |",
      "lineNumber": 3842,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | RUHE + SCHRITT 1Einfuhrbahn T10C oben (T10-206) |",
      "lineNumber": 3844,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6174999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI10 |",
      "lineNumber": 3845,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI10 |",
      "lineNumber": 3848,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 4-5Einfuhrbahn T10C unten (T10-205) |",
      "lineNumber": 3850,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.61875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI10 |",
      "lineNumber": 3851,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Hoch Niveau Einfuhrrinne (2N09-600-HAL)Zeit (10 Sek) |",
      "lineNumber": 3856,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6161538461538462,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT Hoch Niveau Einfuhrrinne (NICHT 2N09-600-HAL)Zeit (10 Sek) |",
      "lineNumber": 3857,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6129629629629629,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | DT Pause Ausfuhr NICHT RUHE |",
      "lineNumber": 3859,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.62625,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | DT Start Ausfuhr NICHT RUHE |",
      "lineNumber": 3860,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6238636363636363,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | (Strömung Ausfuhrrinne N40: Strömung Ausfuhrrinne 2N30 OKStaumeldung Ausfuhrrinne (N40-200)Zeit ?? |",
      "lineNumber": 3862,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6094594594594595,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | (Strömung Ausfuhrrinne N40: Strömung Ausfuhrrinne N40 OKNICHT Staumeldung Ausfuhrrinne (NICHT N40-200)Zeit ?? |",
      "lineNumber": 3863,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6083333333333333,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SCHRITT 4+5 |  |",
      "lineNumber": 3865,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6777777777777777,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| -1 | Ausfuhrtabelle schreiben.Zeiger_leere_Reihe_Ausfuhrtabelle |",
      "lineNumber": 3872,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6156716417910447,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Warten auf letzte Käse aus Reihe (SCHRITT 9) |",
      "lineNumber": 3882,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6184210526315789,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Zähler 1 (Entleerzähler aus Reihe von Horde) <= 0 |",
      "lineNumber": 3883,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6159090909090909,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 8+9DT Reihe ist leer (am HMI)NICHT Drucktaste nächste Horde bedient |",
      "lineNumber": 3885,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6119318181818182,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SCHRITT 8-11 + 13-14?? |",
      "lineNumber": 3886,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6233333333333333,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 6-8DT Nächste Horde (am HMI)NICHT Drucktaste Reihe ist leer bedient |",
      "lineNumber": 3888,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6119318181818182,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SCHRITT 6-10 + 13-14?? |",
      "lineNumber": 3889,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6233333333333333,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Strömung N40 aktivKein Käse in Rinne N40 hinten Ausfuhrbahn T40B (NICHT T40-201)Zeit (?? Sek)Hauptprogramm Ausfuhr: NICHT Ausfuhr aktiv |",
      "lineNumber": 3892,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.606907894736842,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Variable 3 (Anzahl Käse in Reihe) | Start Entleeren (SCHRITT 6&7) |",
      "lineNumber": 3895,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6147887323943662,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| -1 | Neue Etage bestimmen (SCHRITT 13&14)Nächste Etage nach diese Reihe |",
      "lineNumber": 3900,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.614,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | Fertig (SCHRITT 12) |",
      "lineNumber": 3901,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| +1 | Neue Reihe bestimmen (SCHRITT 13&14)Ausfuhrwagen neu positionieren nach diese ReiheNICHT Nächste Etage nach diese ReiheNICHT Ungerade Etage |",
      "lineNumber": 3906,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6070945945945946,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| -1 | Neue Reihe bestimmen (SCHRITT 13&14)Ausfuhrwagen neu positionieren nach diese ReiheNICHT Nächste Etage nach diese ReiheUngerade Etage |",
      "lineNumber": 3907,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6073943661971831,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | Fertig (SCHRITT 12) |",
      "lineNumber": 3908,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6362068965517241,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Hordetür öffnen?  (SCHRITT (4+5)&6)Besonderheit in Reihe = Störung |",
      "lineNumber": 3910,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6132911392405063,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | DT ‚Verfolgen Entleerung‘+ Ausfuhr wird beendet (SCHRITT 12) |",
      "lineNumber": 3911,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6136363636363636,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Hordetür öffnen?  (SCHRITT (4+5)&6)Besonderheit in Reihe = Sortentrennung |",
      "lineNumber": 3913,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6122093023255814,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | DT ‚Verfolgen Entleerung‘+ Ausfuhr wird beendet (SCHRITT 12) |",
      "lineNumber": 3914,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6136363636363636,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Hordetür öffnen (SCHRITT (4+5)&6)Besonderheit in Reihe = Erste Käse der Produktionstag |",
      "lineNumber": 3916,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6106060606060606,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | DT ‚Verfolgen Entleerung‘+ Ausfuhr wird beendet (SCHRITT 12) |",
      "lineNumber": 3917,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6136363636363636,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Meldung: Salzungszeit noch nicht vorbei DT ‚Ignorier Salzungszeit‘ |",
      "lineNumber": 3919,
      "analysis": {
        "hasNumbers": false,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6132911392405063,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 7MT40C drehtNICHT Haken T40 unten (T40-202)ZEIT ??+RUHE + SCHRITT 1NICHT Haken T40 unten (T40-202) |",
      "lineNumber": 3922,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6088235294117647,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI11 |",
      "lineNumber": 3923,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 4-5Haken T40 unten (T40-202) |",
      "lineNumber": 3925,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI11 |",
      "lineNumber": 3926,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 3MT40C drehtNICHT Haken T40 oben (T40-203)ZEIT ??+SCHRITT 4-5NICHT Haken T40 oben (T40-203) |",
      "lineNumber": 3928,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.609375,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI11 |",
      "lineNumber": 3929,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | RUHE + SCHRITT 1Haken T40 oben (T40-203) |",
      "lineNumber": 3931,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.619811320754717,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SET-BedingungenHand HMI11 |",
      "lineNumber": 3932,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = (Aktive Horde – 31)* 5 + Erwünschte Reihe | T40: Entleeren Horde Reihe für Reihe SCHRITT 1&2 |",
      "lineNumber": 3934,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6107142857142857,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 55 | Ausfuhrwagen von Bad nach Reinigungspos. SCHRITT 7&8 |",
      "lineNumber": 3935,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6166666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 56 | Ausfuhrwagen von Bad nach Reinigungspos. SCHRITT 1&2 |",
      "lineNumber": 3936,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6166666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Erwünschte Position Ausfuhrwagen T40 | Start Positionieren (RUHE&SCHRITT 1) |",
      "lineNumber": 3938,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6129629629629629,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT Hauptprogramm Ausfuhr: Pause Ausfuhr |",
      "lineNumber": 3941,
      "analysis": {
        "hasNumbers": false,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6177966101694915,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11+ Drucktaste Reihe leer bedient |",
      "lineNumber": 3944,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.613125,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11 |",
      "lineNumber": 3947,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11 |",
      "lineNumber": 3950,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | **Käse in Rinne N40 hinten Ausfuhrbahn T40B (T40-201)+Störung: Käse in Rinne N40 hinten Ausfuhrbahn T40B erwartet (T40-201)** |",
      "lineNumber": 3953,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6077777777777778,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11 |",
      "lineNumber": 3956,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11 |",
      "lineNumber": 3959,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 | Staumeldung Ausfuhrrinne N40 (N40-200)+Störung: Käse bei Staumeldung Ausfuhrrinne erwartet (N40-200) |",
      "lineNumber": 3962,
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6095454545454545,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-Bedingung(DT Bestätigung alle Störungen+ HAND HMI11) |",
      "lineNumber": 3965,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6128048780487805,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-Bedingung(DT Bestätigung alle Störungen+ HAND HMI11) |",
      "lineNumber": 3968,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6128048780487805,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHAND HMI11 |",
      "lineNumber": 3971,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6214285714285714,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | SCHRITT 9 |",
      "lineNumber": 3973,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6477272727272727,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | SCHRITT 17 |",
      "lineNumber": 3974,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6388888888888888,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 21 (Unterste Position) | Initialisierung SCHRITT 1&2 |",
      "lineNumber": 3976,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.618103448275862,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| -1 | SCHRITT 5&6 |",
      "lineNumber": 3977,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6525,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 0 (Unterste Position) | Initialisierung SCHRITT 1&2 |",
      "lineNumber": 3979,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6184210526315789,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| +1 | SCHRITT 2&3 |",
      "lineNumber": 3980,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6525,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| IN | ?? |",
      "lineNumber": 3982,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6954545454545454,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | ?? |",
      "lineNumber": 3983,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6552631578947368,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| PT | ?? |",
      "lineNumber": 3984,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6954545454545454,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Ausgewählte Horde = 21 DT Horde Aus |",
      "lineNumber": 3986,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Ausgewählte Horde = 21 DT Horde Ein |",
      "lineNumber": 3987,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6201923076923077,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Ausgewählte Horde = 22DT Horde Aus |",
      "lineNumber": 3989,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Ausgewählte Horde = 22DT Horde Ein |",
      "lineNumber": 3990,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6205882352941177,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Ausgewählte Horde = 23DT Horde Aus |",
      "lineNumber": 3992,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Ausgewählte Horde = 23DT Horde Ein |",
      "lineNumber": 3993,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6205882352941177,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Ausgewählte Horde = 24DT Horde Aus |",
      "lineNumber": 3995,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6223404255319148,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Ausgewählte Horde = 24DT Horde Ein |",
      "lineNumber": 3996,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6205882352941177,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Selektionsprogramm Horden für Einfuhr Erwünschte Etage für vorselektierte Horde | Start Horde aufstellen für Füllen (Füllen Horde N21 SCHRITT 2& 3) |",
      "lineNumber": 3998,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6068627450980392,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Erwünschte Position Horde N21 | Start Positionieren (RUHE&SCHRITT 1) |",
      "lineNumber": 4003,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6141891891891892,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHorde N21 HAND |",
      "lineNumber": 4006,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.619811320754717,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | NICHT Hydraulik Behälter P121/122 (Horde N21/N21) nicht leer (NICHT P121/122-600-LAL) |",
      "lineNumber": 4008,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6107142857142857,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungDT Bestätigung alle Störungen |",
      "lineNumber": 4009,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6154411764705883,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungDT HAND  ?? |",
      "lineNumber": 4012,
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.621,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Öffnen Strömungsjet für Horde wenn Käse 1-10 einschwimmt Zeit (3 Sek) |",
      "lineNumber": 4030,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6122093023255814,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| SETZEN | Umschwimmen Horde N21 nach N31 SCHRITT 5+19SCHRITT 8Hebevorrichtung Horde N31 hinunten (N31-100-L)Zeit (4.0 Sek) |",
      "lineNumber": 4035,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6083999999999999,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | Stopp Horde nach unten bei Umschwimmen Zeit (15 Sek) |",
      "lineNumber": 4036,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6152173913043478,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = Erwünschte Position Horde N31 | Start Positionieren (RUHE&SCHRITT 1) |",
      "lineNumber": 4043,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6141891891891892,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| RÜCKSETZEN | NICHT SETZEN-BedingungHorde N31 HAND |",
      "lineNumber": 4046,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.619811320754717,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 25 Hz | NICHT Transportbahn T30A Stopp Transportbahn T30A |",
      "lineNumber": 4048,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6166666666666667,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| = 15 Hz | Transportbahn T30A Stopp Transportbahn T30A |",
      "lineNumber": 4049,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6184210526315789,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| Chargedaten (Komm. von K5) | SCHRITT 1 |",
      "lineNumber": 4057,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.625,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0 | **SCHRITT 7** |",
      "lineNumber": 4058,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.65,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| Chargedaten (Neue Chargedaten) | SCHRITT 3 |",
      "lineNumber": 4060,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6228260869565218,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "| 0 | RUHE |",
      "lineNumber": 4061,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "booleanPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\s+(UND|ODER|&|\\|)\\s+/",
      "suggestedGroup": "booleanPatterns",
      "confidence": 0.6875,
      "reasoning": [
        "Intelligently categorized as booleanPatterns"
      ]
    },
    {
      "originalLine": "Version 0.0.02",
      "lineNumber": 195,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "0.0.00",
      "lineNumber": 296,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "0.0.01",
      "lineNumber": 300,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "0.0.02",
      "lineNumber": 304,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Chargenummer T10 <> 0 ??",
      "lineNumber": 372,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6729166666666666,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 22",
      "lineNumber": 531,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 23",
      "lineNumber": 533,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 24",
      "lineNumber": 535,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[ Aktive Einfuhrhorde = 21",
      "lineNumber": 558,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6538461538461539,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 21",
      "lineNumber": 569,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Vorselektierte Horde für 1e Befüllung > 24",
      "lineNumber": 570,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6333333333333333,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "& Vorselektierte Horde für 1e Befüllung <> 0",
      "lineNumber": 572,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6318181818181818,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 1",
      "lineNumber": 581,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[ Aktive Einfuhrhorde = 21",
      "lineNumber": 589,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6538461538461539,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 600,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 21",
      "lineNumber": 611,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 22",
      "lineNumber": 614,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 23",
      "lineNumber": 617,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 1",
      "lineNumber": 631,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Etage für vorselektierte Horde <> 0",
      "lineNumber": 639,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6304347826086957,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen <> 55 (Reinigungsposition)",
      "lineNumber": 661,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6307017543859649,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit ~ 0.5 Sek",
      "lineNumber": 717,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit ~ 0.5 Sek",
      "lineNumber": 721,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[ Sortenwechsel N10 (Besonderheit = 2) (Komm. von K5)",
      "lineNumber": 728,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.619811320754717,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Einfuhrwagen T10 <> Erwünschte Position Einfuhrwagen T10",
      "lineNumber": 786,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6236486486486487,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N22 <> Erwünschte Position Horde N22",
      "lineNumber": 803,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N23 <> Erwünschte Position Horde N23",
      "lineNumber": 807,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N24 <> Erwünschte Position Horde N24",
      "lineNumber": 811,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N21 == Erwünschte Position Horde N21",
      "lineNumber": 829,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N22 == Erwünschte Position Horde N22",
      "lineNumber": 833,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N23 == Erwünschte Position Horde N23",
      "lineNumber": 837,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 942,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 971,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 1063,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 6",
      "lineNumber": 1076,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Ausfuhrwagen T40 <> Erwünschte Position Ausfuhrwagen T40",
      "lineNumber": 1940,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6236486486486487,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N32 <> Erwünschte Position Horde N32",
      "lineNumber": 1957,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N33 <> Erwünschte Position Horde N33",
      "lineNumber": 1961,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position Horde N34 <> Erwünschte Position Horde N34",
      "lineNumber": 1965,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Verpackung T97/T98 gestartet (nur bei SB2.1B) ??",
      "lineNumber": 2024,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.621875,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[ Zähler 1 (Entleerzähler aus Reihe von Horde) <= 1",
      "lineNumber": 2032,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6274509803921569,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe > 1",
      "lineNumber": 2106,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6525,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Erwünschte Reihe < 6",
      "lineNumber": 2110,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6525,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Aktuelle Position T40 < Sollwert T40 – 20mm??",
      "lineNumber": 2153,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6311111111111111,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 2159,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 2175,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 1",
      "lineNumber": 2184,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 6",
      "lineNumber": 2193,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 2212,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Istwert totale Salzungszeit < Sollwert totale Salzungszeit – 10%",
      "lineNumber": 2248,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6164062499999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Sollwert totale Salzungszeit > 0",
      "lineNumber": 2250,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6328125,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 55",
      "lineNumber": 2483,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 56",
      "lineNumber": 2485,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 2587,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 21 (Unterste Position)",
      "lineNumber": 2854,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6583333333333333,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0 (Unterste Position)",
      "lineNumber": 2860,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6456521739130434,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 21 (Unterste Position)",
      "lineNumber": 2994,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6583333333333333,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Letzte gefüllte Etage > 0",
      "lineNumber": 3003,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.642,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit (0.5 Sek)",
      "lineNumber": 3035,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Niveau in Salzbad nicht zu niedrig (Niveau Salzbad(N20-400) < 80 %)",
      "lineNumber": 3177,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6208955223880597,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 15 Hz",
      "lineNumber": 3185,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 30 Hz",
      "lineNumber": 3191,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit (4.0 Sek)",
      "lineNumber": 3356,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Letzte aktive(entleerte) Etage > 0",
      "lineNumber": 3378,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6308823529411764,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 25 Hz",
      "lineNumber": 3452,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 15 Hz",
      "lineNumber": 3454,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.7999999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit (0.5 Sek)",
      "lineNumber": 3502,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit (0.5 Sek)",
      "lineNumber": 3508,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6749999999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Zeit (Ausschaltverzögerung 0.5 Sek)",
      "lineNumber": 3530,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.63,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Chargenummer (Komm. von K5) <> 0",
      "lineNumber": 3560,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6437499999999999,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Käsekode (Komm. von K5) <> 0",
      "lineNumber": 3561,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.65,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Komm. von K5) <> 0",
      "lineNumber": 3562,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6451612903225806,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Chargenummer (Neue Chargedaten) <> 0",
      "lineNumber": 3572,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6388888888888888,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Käsekode (Neue Chargedaten)  <> 0",
      "lineNumber": 3573,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6424242424242423,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Neue Chargedaten)  <> 0",
      "lineNumber": 3574,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6388888888888888,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Chargenummer (Neue Chargedaten) <> 0",
      "lineNumber": 3599,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6388888888888888,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Besonderheit (Neue Chargedaten)  == 0,1,2",
      "lineNumber": 3600,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6341463414634146,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Anzahl Käse (Neue Chargedaten)  > 0",
      "lineNumber": 3601,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.63,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Käsekode (Neue Chargedaten)  <> 0",
      "lineNumber": 3602,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6424242424242423,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Salzungszeit gültig (gültige Salzungszeit (Stunden > 0) ins Rezept",
      "lineNumber": 3604,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6159090909090909,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "= 0",
      "lineNumber": 3619,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.95,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[Chargenummer (Komm. von K2) = 0",
      "lineNumber": 3621,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6328125,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[Chargenummer (Neue Chargedaten) = 0",
      "lineNumber": 3629,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6291666666666667,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "[Käsekode (Neue Chargedaten) = 0",
      "lineNumber": 3632,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.6328125,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "originalLine": "Besonderheit (Neue Chargedaten) <> 0,1,2",
      "lineNumber": 3636,
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "numericPatterns",
        "categorizedBy": "IntelligentConditionParser"
      },
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "suggestedGroup": "numericPatterns",
      "confidence": 0.635,
      "reasoning": [
        "Intelligently categorized as numericPatterns"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": true,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": true,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "step"
      },
      "suggestedRegex": "/^(\\w+)\\s+(\\d+)\\s*:\\s*(.*)$/",
      "suggestedGroup": "schritt",
      "confidence": 0.7,
      "reasoning": [
        "Contains colon and number, likely step declaration"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": true,
        "hasKeywords": true,
        "potentialType": "cross_reference"
      },
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "suggestedGroup": "cross_reference",
      "confidence": 0.9,
      "reasoning": [
        "Contains parentheses and step keywords, likely cross-reference"
      ]
    },
    {
      "analysis": {
        "hasNumbers": false,
        "hasColon": false,
        "hasEquals": false,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "condition"
      },
      "suggestedRegex": "/^[+-]\\s*(.*)$/",
      "suggestedGroup": "condition",
      "confidence": 0.6,
      "reasoning": [
        "Starts with +/-, likely condition"
      ]
    },
    {
      "analysis": {
        "hasNumbers": true,
        "hasColon": false,
        "hasEquals": true,
        "hasParentheses": false,
        "hasKeywords": false,
        "potentialType": "variable"
      },
      "suggestedRegex": "/^([^=]+)\\s*=\\s*(.*)$/",
      "suggestedGroup": "hulpmerker",
      "confidence": 0.8,
      "reasoning": [
        "Contains equals sign, likely variable assignment"
      ]
    }
  ],
  "syntaxRuleUpdates": [
    {
      "group": "crossReferences",
      "suggestedRegex": "/\\([^)]+\\s+(SCHRITT|STAP|STEP)\\s+[0-9+&-]+\\)/",
      "examples": [
        "Produktion (Haupt Einfuhr SCHRITT 3)",
        "| = 0 | Ende Einfuhr (Hauptprogramm Einfuhr SCHRITT 8) |",
        "| R | Käse detektiert (Käsezähler Anfang T10B SCHRITT 1) |"
      ],
      "confidence": 0.8430555555555554,
      "comment": "Auto-generated from 4 similar patterns"
    },
    {
      "group": "conditions",
      "suggestedRegex": "/^[\\+\\-\\s]*[^()]+$/",
      "examples": [
        "+ Vorselektierte Horde für 1e Befüllung < 21",
        "+1",
        "+1"
      ],
      "confidence": 0.95,
      "comment": "Auto-generated from 68 similar patterns"
    },
    {
      "group": "zeitPatterns",
      "suggestedRegex": "/\\d+\\s*sek/",
      "examples": [
        "Zeit 7sek??",
        "Zeit 7sek??",
        "Zeit 7sek??"
      ],
      "confidence": 0.8916666666666666,
      "comment": "Auto-generated from 10 similar patterns"
    },
    {
      "group": "technicalStatus",
      "suggestedRegex": "/^[A-Z]\\d+[x]?\\s*:/",
      "examples": [
        "HAND T10",
        "HAND T10",
        "HAND T10"
      ],
      "confidence": 0.95,
      "comment": "Auto-generated from 6 similar patterns"
    },
    {
      "group": "variableAssignments",
      "suggestedRegex": "/^[A-Za-z][^=]*\\s*=\\s*[^=]+$/",
      "examples": [
        "Horde[Vorselektierte Horde für 1e Befüllung].Status = 4",
        "Horde[Vorselektierte Horde für 1e Befüllung].Status = 0",
        "Variable 1 (Aktive Einfuhrhorde) = 21"
      ],
      "confidence": 0.95,
      "comment": "Auto-generated from 137 similar patterns"
    },
    {
      "group": "industrialPatterns",
      "suggestedRegex": "/^(Start|Stop|Freigabe|Störung)\\s+[A-Z]/",
      "examples": [
        "Störung:MT40A"
      ],
      "confidence": 0.8153846153846154,
      "comment": "Auto-generated from 1 similar patterns"
    },
    {
      "group": "arrayPatterns",
      "suggestedRegex": "/\\[[^\\]]+\\]/",
      "examples": [
        "[ Horden Ausfuhrtabelle. Reihe[0]. von Etage < 1",
        "[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1",
        "[ Horden Ausfuhrtabelle. Reihe[0]. von Reihe < 1"
      ],
      "confidence": 0.9016574585635359,
      "comment": "Auto-generated from 6 similar patterns"
    },
    {
      "group": "numericPatterns",
      "suggestedRegex": "/\\d+[<>=!]|[<>=!]\\d+/",
      "examples": [
        "= 22",
        "= 23",
        "= 24"
      ],
      "confidence": 0.95,
      "comment": "Auto-generated from 23 similar patterns"
    },
    {
      "group": "cross_reference",
      "suggestedRegex": "/\\(([^)]+)\\s+(SCHRITT|STAP|STEP)\\s+([0-9+]+)\\)/",
      "examples": [
        null,
        null,
        null
      ],
      "confidence": 0.9,
      "comment": "Auto-generated from 43 similar patterns"
    }
  ],
  "trainingRecommendations": [
    {
      "type": "unknown_patterns",
      "description": "Found 1169 unknown patterns",
      "suggestion": "Consider expanding syntax rules to handle these patterns"
    }
  ]
}